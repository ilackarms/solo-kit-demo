// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type GoogleApiKeyWatcher interface {
	// watch namespace-scoped Googleapikeys
	Watch(namespace string, opts clients.WatchOpts) (<-chan GoogleApiKeyList, <-chan error, error)
}

type GoogleApiKeyClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*GoogleApiKey, error)
	Write(resource *GoogleApiKey, opts clients.WriteOpts) (*GoogleApiKey, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (GoogleApiKeyList, error)
	GoogleApiKeyWatcher
}

type googleApiKeyClient struct {
	rc clients.ResourceClient
}

func NewGoogleApiKeyClient(rcFactory factory.ResourceClientFactory) (GoogleApiKeyClient, error) {
	return NewGoogleApiKeyClientWithToken(rcFactory, "")
}

func NewGoogleApiKeyClientWithToken(rcFactory factory.ResourceClientFactory, token string) (GoogleApiKeyClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &GoogleApiKey{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base GoogleApiKey resource client")
	}
	return NewGoogleApiKeyClientWithBase(rc), nil
}

func NewGoogleApiKeyClientWithBase(rc clients.ResourceClient) GoogleApiKeyClient {
	return &googleApiKeyClient{
		rc: rc,
	}
}

func (client *googleApiKeyClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *googleApiKeyClient) Register() error {
	return client.rc.Register()
}

func (client *googleApiKeyClient) Read(namespace, name string, opts clients.ReadOpts) (*GoogleApiKey, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*GoogleApiKey), nil
}

func (client *googleApiKeyClient) Write(googleApiKey *GoogleApiKey, opts clients.WriteOpts) (*GoogleApiKey, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(googleApiKey, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*GoogleApiKey), nil
}

func (client *googleApiKeyClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *googleApiKeyClient) List(namespace string, opts clients.ListOpts) (GoogleApiKeyList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToGoogleApiKey(resourceList), nil
}

func (client *googleApiKeyClient) Watch(namespace string, opts clients.WatchOpts) (<-chan GoogleApiKeyList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	googleapikeysChan := make(chan GoogleApiKeyList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				googleapikeysChan <- convertToGoogleApiKey(resourceList)
			case <-opts.Ctx.Done():
				close(googleapikeysChan)
				return
			}
		}
	}()
	return googleapikeysChan, errs, nil
}

func convertToGoogleApiKey(resources resources.ResourceList) GoogleApiKeyList {
	var googleApiKeyList GoogleApiKeyList
	for _, resource := range resources {
		googleApiKeyList = append(googleApiKeyList, resource.(*GoogleApiKey))
	}
	return googleApiKeyList
}
