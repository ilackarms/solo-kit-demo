// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"

	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type PresentationsSnapshot struct {
	Presentations PresentationList
	Googleapikeys GoogleApiKeyList
}

func (s PresentationsSnapshot) Clone() PresentationsSnapshot {
	return PresentationsSnapshot{
		Presentations: s.Presentations.Clone(),
		Googleapikeys: s.Googleapikeys.Clone(),
	}
}

func (s PresentationsSnapshot) Hash() uint64 {
	return hashutils.HashAll(
		s.hashPresentations(),
		s.hashGoogleapikeys(),
	)
}

func (s PresentationsSnapshot) hashPresentations() uint64 {
	return hashutils.HashAll(s.Presentations.AsInterfaces()...)
}

func (s PresentationsSnapshot) hashGoogleapikeys() uint64 {
	return hashutils.HashAll(s.Googleapikeys.AsInterfaces()...)
}

func (s PresentationsSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	fields = append(fields, zap.Uint64("presentations", s.hashPresentations()))
	fields = append(fields, zap.Uint64("googleapikeys", s.hashGoogleapikeys()))

	return append(fields, zap.Uint64("snapshotHash", s.Hash()))
}

type PresentationsSnapshotStringer struct {
	Version       uint64
	Presentations []string
	Googleapikeys []string
}

func (ss PresentationsSnapshotStringer) String() string {
	s := fmt.Sprintf("PresentationsSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Presentations %v\n", len(ss.Presentations))
	for _, name := range ss.Presentations {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Googleapikeys %v\n", len(ss.Googleapikeys))
	for _, name := range ss.Googleapikeys {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s PresentationsSnapshot) Stringer() PresentationsSnapshotStringer {
	return PresentationsSnapshotStringer{
		Version:       s.Hash(),
		Presentations: s.Presentations.NamespacesDotNames(),
		Googleapikeys: s.Googleapikeys.NamespacesDotNames(),
	}
}
