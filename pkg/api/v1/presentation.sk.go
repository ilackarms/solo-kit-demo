// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"log"
	"sort"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewPresentation(namespace, name string) *Presentation {
	presentation := &Presentation{}
	presentation.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return presentation
}

func (r *Presentation) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *Presentation) SetStatus(status core.Status) {
	r.Status = status
}

func (r *Presentation) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	return hashutils.HashAll(
		metaCopy,
		r.Title,
		r.ContentSlideTitle,
		r.ContentSlideContent,
	)
}

func (r *Presentation) GroupVersionKind() schema.GroupVersionKind {
	return PresentationGVK
}

type PresentationList []*Presentation

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list PresentationList) Find(namespace, name string) (*Presentation, error) {
	for _, presentation := range list {
		if presentation.GetMetadata().Name == name {
			if namespace == "" || presentation.GetMetadata().Namespace == namespace {
				return presentation, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find presentation %v.%v", namespace, name)
}

func (list PresentationList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, presentation := range list {
		ress = append(ress, presentation)
	}
	return ress
}

func (list PresentationList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, presentation := range list {
		ress = append(ress, presentation)
	}
	return ress
}

func (list PresentationList) Names() []string {
	var names []string
	for _, presentation := range list {
		names = append(names, presentation.GetMetadata().Name)
	}
	return names
}

func (list PresentationList) NamespacesDotNames() []string {
	var names []string
	for _, presentation := range list {
		names = append(names, presentation.GetMetadata().Namespace+"."+presentation.GetMetadata().Name)
	}
	return names
}

func (list PresentationList) Sort() PresentationList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list PresentationList) Clone() PresentationList {
	var presentationList PresentationList
	for _, presentation := range list {
		presentationList = append(presentationList, resources.Clone(presentation).(*Presentation))
	}
	return presentationList
}

func (list PresentationList) Each(f func(element *Presentation)) {
	for _, presentation := range list {
		f(presentation)
	}
}

func (list PresentationList) EachResource(f func(element resources.Resource)) {
	for _, presentation := range list {
		f(presentation)
	}
}

func (list PresentationList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *Presentation) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for Presentation

func (o *Presentation) GetObjectKind() schema.ObjectKind {
	t := PresentationCrd.TypeMeta()
	return &t
}

func (o *Presentation) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*Presentation)
}

var (
	PresentationCrd = crd.NewCrd(
		"presentations",
		PresentationGVK.Group,
		PresentationGVK.Version,
		PresentationGVK.Kind,
		"pr",
		false,
		&Presentation{})
)

func init() {
	if err := crd.AddCrd(PresentationCrd); err != nil {
		log.Fatalf("could not add crd to global registry")
	}
}

var (
	PresentationGVK = schema.GroupVersionKind{
		Version: "v1",
		Group:   "demos.solo.io",
		Kind:    "Presentation",
	}
)
