// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sync"
	"time"

	"go.opencensus.io/stats"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/tag"

	"github.com/solo-io/go-utils/errutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/errors"
)

var (
	mPresentationsSnapshotIn  = stats.Int64("presentations.demos.solo.io/snap_emitter/snap_in", "The number of snapshots in", "1")
	mPresentationsSnapshotOut = stats.Int64("presentations.demos.solo.io/snap_emitter/snap_out", "The number of snapshots out", "1")

	presentationssnapshotInView = &view.View{
		Name:        "presentations.demos.solo.io_snap_emitter/snap_in",
		Measure:     mPresentationsSnapshotIn,
		Description: "The number of snapshots updates coming in",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
	presentationssnapshotOutView = &view.View{
		Name:        "presentations.demos.solo.io/snap_emitter/snap_out",
		Measure:     mPresentationsSnapshotOut,
		Description: "The number of snapshots updates going out",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
)

func init() {
	view.Register(presentationssnapshotInView, presentationssnapshotOutView)
}

type PresentationsEmitter interface {
	Register() error
	Presentation() PresentationClient
	GoogleApiKey() GoogleApiKeyClient
	Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *PresentationsSnapshot, <-chan error, error)
}

func NewPresentationsEmitter(presentationClient PresentationClient, googleApiKeyClient GoogleApiKeyClient) PresentationsEmitter {
	return NewPresentationsEmitterWithEmit(presentationClient, googleApiKeyClient, make(chan struct{}))
}

func NewPresentationsEmitterWithEmit(presentationClient PresentationClient, googleApiKeyClient GoogleApiKeyClient, emit <-chan struct{}) PresentationsEmitter {
	return &presentationsEmitter{
		presentation: presentationClient,
		googleApiKey: googleApiKeyClient,
		forceEmit:    emit,
	}
}

type presentationsEmitter struct {
	forceEmit    <-chan struct{}
	presentation PresentationClient
	googleApiKey GoogleApiKeyClient
}

func (c *presentationsEmitter) Register() error {
	if err := c.presentation.Register(); err != nil {
		return err
	}
	if err := c.googleApiKey.Register(); err != nil {
		return err
	}
	return nil
}

func (c *presentationsEmitter) Presentation() PresentationClient {
	return c.presentation
}

func (c *presentationsEmitter) GoogleApiKey() GoogleApiKeyClient {
	return c.googleApiKey
}

func (c *presentationsEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *PresentationsSnapshot, <-chan error, error) {

	if len(watchNamespaces) == 0 {
		watchNamespaces = []string{""}
	}

	for _, ns := range watchNamespaces {
		if ns == "" && len(watchNamespaces) > 1 {
			return nil, nil, errors.Errorf("the \"\" namespace is used to watch all namespaces. Snapshots can either be tracked for " +
				"specific namespaces or \"\" AllNamespaces, but not both.")
		}
	}

	errs := make(chan error)
	var done sync.WaitGroup
	ctx := opts.Ctx
	/* Create channel for Presentation */
	type presentationListWithNamespace struct {
		list      PresentationList
		namespace string
	}
	presentationChan := make(chan presentationListWithNamespace)

	var initialPresentationList PresentationList
	/* Create channel for GoogleApiKey */
	type googleApiKeyListWithNamespace struct {
		list      GoogleApiKeyList
		namespace string
	}
	googleApiKeyChan := make(chan googleApiKeyListWithNamespace)

	var initialGoogleApiKeyList GoogleApiKeyList

	currentSnapshot := PresentationsSnapshot{}

	for _, namespace := range watchNamespaces {
		/* Setup namespaced watch for Presentation */
		{
			presentations, err := c.presentation.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "initial Presentation list")
			}
			initialPresentationList = append(initialPresentationList, presentations...)
		}
		presentationNamespacesChan, presentationErrs, err := c.presentation.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Presentation watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, presentationErrs, namespace+"-presentations")
		}(namespace)
		/* Setup namespaced watch for GoogleApiKey */
		{
			googleapikeys, err := c.googleApiKey.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "initial GoogleApiKey list")
			}
			initialGoogleApiKeyList = append(initialGoogleApiKeyList, googleapikeys...)
		}
		googleApiKeyNamespacesChan, googleApiKeyErrs, err := c.googleApiKey.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting GoogleApiKey watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, googleApiKeyErrs, namespace+"-googleapikeys")
		}(namespace)

		/* Watch for changes and update snapshot */
		go func(namespace string) {
			for {
				select {
				case <-ctx.Done():
					return
				case presentationList := <-presentationNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case presentationChan <- presentationListWithNamespace{list: presentationList, namespace: namespace}:
					}
				case googleApiKeyList := <-googleApiKeyNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case googleApiKeyChan <- googleApiKeyListWithNamespace{list: googleApiKeyList, namespace: namespace}:
					}
				}
			}
		}(namespace)
	}
	/* Initialize snapshot for Presentations */
	currentSnapshot.Presentations = initialPresentationList.Sort()
	/* Initialize snapshot for Googleapikeys */
	currentSnapshot.Googleapikeys = initialGoogleApiKeyList.Sort()

	snapshots := make(chan *PresentationsSnapshot)
	go func() {
		originalSnapshot := PresentationsSnapshot{}
		timer := time.NewTicker(time.Second * 1)

		sync := func() {
			if originalSnapshot.Hash() == currentSnapshot.Hash() {
				return
			}

			stats.Record(ctx, mPresentationsSnapshotOut.M(1))
			originalSnapshot = currentSnapshot.Clone()
			sentSnapshot := currentSnapshot.Clone()
			snapshots <- &sentSnapshot
		}
		presentationsByNamespace := make(map[string]PresentationList)
		googleapikeysByNamespace := make(map[string]GoogleApiKeyList)

		for {
			record := func() { stats.Record(ctx, mPresentationsSnapshotIn.M(1)) }

			select {
			case <-timer.C:
				sync()
			case <-ctx.Done():
				close(snapshots)
				done.Wait()
				close(errs)
				return
			case <-c.forceEmit:
				sentSnapshot := currentSnapshot.Clone()
				snapshots <- &sentSnapshot
			case presentationNamespacedList := <-presentationChan:
				record()

				namespace := presentationNamespacedList.namespace

				// merge lists by namespace
				presentationsByNamespace[namespace] = presentationNamespacedList.list
				var presentationList PresentationList
				for _, presentations := range presentationsByNamespace {
					presentationList = append(presentationList, presentations...)
				}
				currentSnapshot.Presentations = presentationList.Sort()
			case googleApiKeyNamespacedList := <-googleApiKeyChan:
				record()

				namespace := googleApiKeyNamespacedList.namespace

				// merge lists by namespace
				googleapikeysByNamespace[namespace] = googleApiKeyNamespacedList.list
				var googleApiKeyList GoogleApiKeyList
				for _, googleapikeys := range googleapikeysByNamespace {
					googleApiKeyList = append(googleApiKeyList, googleapikeys...)
				}
				currentSnapshot.Googleapikeys = googleApiKeyList.Sort()
			}
		}
	}()
	return snapshots, errs, nil
}
