// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"log"
	"sort"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewGoogleApiKey(namespace, name string) *GoogleApiKey {
	googleapikey := &GoogleApiKey{}
	googleapikey.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return googleapikey
}

func (r *GoogleApiKey) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *GoogleApiKey) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	return hashutils.HashAll(
		metaCopy,
		r.CredentialsBase64,
	)
}

func (r *GoogleApiKey) GroupVersionKind() schema.GroupVersionKind {
	return GoogleApiKeyGVK
}

type GoogleApiKeyList []*GoogleApiKey

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list GoogleApiKeyList) Find(namespace, name string) (*GoogleApiKey, error) {
	for _, googleApiKey := range list {
		if googleApiKey.GetMetadata().Name == name {
			if namespace == "" || googleApiKey.GetMetadata().Namespace == namespace {
				return googleApiKey, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find googleApiKey %v.%v", namespace, name)
}

func (list GoogleApiKeyList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, googleApiKey := range list {
		ress = append(ress, googleApiKey)
	}
	return ress
}

func (list GoogleApiKeyList) Names() []string {
	var names []string
	for _, googleApiKey := range list {
		names = append(names, googleApiKey.GetMetadata().Name)
	}
	return names
}

func (list GoogleApiKeyList) NamespacesDotNames() []string {
	var names []string
	for _, googleApiKey := range list {
		names = append(names, googleApiKey.GetMetadata().Namespace+"."+googleApiKey.GetMetadata().Name)
	}
	return names
}

func (list GoogleApiKeyList) Sort() GoogleApiKeyList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list GoogleApiKeyList) Clone() GoogleApiKeyList {
	var googleApiKeyList GoogleApiKeyList
	for _, googleApiKey := range list {
		googleApiKeyList = append(googleApiKeyList, resources.Clone(googleApiKey).(*GoogleApiKey))
	}
	return googleApiKeyList
}

func (list GoogleApiKeyList) Each(f func(element *GoogleApiKey)) {
	for _, googleApiKey := range list {
		f(googleApiKey)
	}
}

func (list GoogleApiKeyList) EachResource(f func(element resources.Resource)) {
	for _, googleApiKey := range list {
		f(googleApiKey)
	}
}

func (list GoogleApiKeyList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *GoogleApiKey) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for GoogleApiKey

func (o *GoogleApiKey) GetObjectKind() schema.ObjectKind {
	t := GoogleApiKeyCrd.TypeMeta()
	return &t
}

func (o *GoogleApiKey) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*GoogleApiKey)
}

var (
	GoogleApiKeyCrd = crd.NewCrd(
		"googleapikeys",
		GoogleApiKeyGVK.Group,
		GoogleApiKeyGVK.Version,
		GoogleApiKeyGVK.Kind,
		"gk",
		false,
		&GoogleApiKey{})
)

func init() {
	if err := crd.AddCrd(GoogleApiKeyCrd); err != nil {
		log.Fatalf("could not add crd to global registry")
	}
}

var (
	GoogleApiKeyGVK = schema.GroupVersionKind{
		Version: "v1",
		Group:   "demos.solo.io",
		Kind:    "GoogleApiKey",
	}
)
